
bold = "\033[1m"
green = "\033[92m"
end = "\033[0m"
msg = f"""{green}{bold} It's rephasing time! :) \n{end}{end}"""
sys.stderr.write(msg)

configfile: "config/Snake.config.json"

REGION_FILE = config['region_file']
SAMPLE_FILE = config['sample_file']

f = open(REGION_FILE)
REGIONS = f.read().split("\n")[:-1]
f.close()
print(REGIONS)

f = open(SAMPLE_FILE)
SAMPLES = f.read().split("\n")[:-1]
f.close()
print(SAMPLES)

HAPS = ['1', '2']
print(HAPS)




rule all:
    input:
        i1 = expand("res/actions_all_{chunklen}.tsv",chunklen=config['chunklen']),
        i2 = expand('res/actions/{region}_{sample}_h{hap}_{chunklen}.tsv', region=REGIONS, sample=SAMPLES, hap=HAPS, chunklen=config['chunklen']),
        #i3 = expand('res/vcf/NW_flipped_{chunklen}.vcf', chunklen=config['chunklen'])

rule flip:
    input:
        vcf = config['nw_res_vcf'],
        actions = "res/actions_all_{chunklen}.tsv"
    output:
        outvcf = 'res/vcf/NW_flipped_{chunklen}.vcf',
        log = 'res/vcf/NW_flipped_{chunklen}.log'
    shell:
        """
        Rscript workflow/scripts/vcfflip_tools.R --vcf {input.vcf} --actions {input.actions} --vcfout {output.outvcf} --logout {output.log} 
        """

rule subset_vcf_to_region:
    input:
        vcf = config['vcf_dir']
    output:
        out = '/scratch/hoeps/nygc_subsets/{region}_allsamples.vcf.gz'
    run:
        region = wildcards.region
        chr, start, end = region. split('-')
        shell(
        """
        tabix {input.vcf}/1kGP*{chr}.filtered*.vcf.gz {chr}:{start}-{end} -h > {output}
        gzip {output}
        """
        )

rule combine_actions:
    input:
        expand('res/actions/{region}_{sample}_h{hap}_{chunklen}.tsv', region=REGIONS, sample=SAMPLES, hap=HAPS, chunklen=config['chunklen']),
    output:
        "res/actions_all_{chunklen}.tsv"
    shell:
        """
        echo {input}
        echo {input} | xargs cat > {output}
        """

rule get_action_line:
    input: 
        "res/summarylists/{region}_{sample}_h{hap}_{chunklen}_summary.tsv"
    output: 
        "res/actions/{region}_{sample}_h{hap}_{chunklen}.tsv"
    shell:
        """
        Rscript workflow/scripts/phasing_helpers.R \
              --function_name evaluate_summarylist \
              --summarylist {input} \
              --actionlist {output}
        """

rule get_summarylist:
    input:
        haptags = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam_tags.tsv"
    output:
        "res/summarylists/{region}_{sample}_h{hap}_{chunklen}_summary.tsv"
    shell:
        """
        Rscript workflow/scripts/phasing_helpers.R \
              --function_name collect_whatshap_res \
              --haptags {input.haptags} \
              --sample {wildcards.sample} \
              --region {wildcards.region} \
              --hap {wildcards.hap} \
              --summarylist_link {output}
        """

rule subset_vcf_region_to_sample:
    input:
        vcf_gz_in = '/scratch/hoeps/nygc_subsets/{region}_allsamples.vcf.gz',
    output:
        vcf = '/scratch/hoeps/nygc_subsets/singlesample_{region}_{sample}.vcf',
        vcf_gz = '/scratch/hoeps/nygc_subsets/singlesample_{region}_{sample}.vcf.gz',
    params:
        bgzip_bin = config['bgzip_bin'],
        bcftools_bin = config['bcftools_bin']
    shell:
        """
        Rscript workflow/scripts/phasing_helpers.R \
            --function subset_vcf_to_singlesample \
            --subset_vcf_allsamples {input.vcf_gz_in} \
            --sample {wildcards.sample} \
            --subset_vcf_singlesample_vcf {output.vcf} \
            --subset_vcf_singlesample_vcf_gz {output.vcf_gz} \
            --bgzip_bin {params.bgzip_bin} \
            --bcftools_bin {params.bcftools_bin}
        """


rule get_haptags:
    input:
        bam = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam",
        bam_bai = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam.bai"
        vcf_singlesample = '/scratch/hoeps/nygc_subsets/singlesample_{region}_{sample}.vcf.gz',
        vcf_singlesample_idx = '/scratch/hoeps/nygc_subsets/singlesample_{region}_{sample}.vcf.gz.tbi'
    output:
        haptags = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam_tags.tsv"
    params:
        hg38_fa = config['hg38_fa'],
        whatshap_bin = config['whatshap_bin']
    shell:
        """
        sample_name="{wildcards.sample}"

        if [ "$sample_name" == "HG002" ]; then
            vcf_samplename="NA24385"
        elif [[ "$sample_name" == GM* ]]; then
            vcf_samplename=${{sample_name//GM/NA}}  # double curly braces for Snakemake to escape them
        else
            vcf_samplename="$sample_name"
        fi

        echo $vcf_samplename
        
        {params.whatshap_bin} haplotag \
            -o {input.bam}_tagged.bam \
            --reference {params.hg38_fa} \
            {input.vcf_singlesample} \
            --sample $vcf_samplename \
            --output-haplotag-list {output.haptags} \
            --ignore-read-groups \
            {input.bam}
        """

rule get_fasta_and_shred:
    input:
    output:
        asm_chunked_fasta = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.fa"
    params:
        nw_res_path = config['nw_res_path']
    shell:
        """
         Rscript workflow/scripts/phasing_helpers.R \
                --function_name get_fasta_and_shred \
                --sample {wildcards.sample} \
                --hap {wildcards.hap} \
                --region {wildcards.region} \
                --chunklen {config['chunklen']} \
                --res_path {params.nw_res_path} \
                --asm_chunked_fasta {output.asm_chunked_fasta}
        """

rule align:
    input:
        asm_chunked_fasta = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.fa"
    output:
        bam = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam"
    params:
        minimap2_bin = config['minimap2_bin'],
        hg38_mmi = config['hg38_mmi']
    shell:
        """
        {params.minimap2_bin} \
            -a {params.hg38_mmi} \
            {input.asm_chunked_fasta} | samtools sort -o {output.bam} -
        """

rule sam_to_bam:
    input:
        {foo.sam}
    output:
        {foo.bam}
    params:
        samtools_bin = config['samtools_bin'],
    shell:
        """
        {params.samtools_bin} view -bS {input} > {output}
        """

# rule align:
#     input:
#     output:
#     shell:
#         sam = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.sam"
#         bam = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam"
#         bam_bai = "/scratch/hoeps/bamsam/{sample}_h{hap}_{region}_{chunklen}.bam.bai"
#     params:
#         nw_res_path = config['nw_res_path'],
#         hg38_mmi = config['hg38_mmi'],
#         mm2_bin = config['mm2_bin'],
#         samtools_bin = config['samtools_bin'],
#         bedtools_bin = config['bedtools_bin'],
#         chunklen = config['chunklen']
#     shell:
#         """
#         Rscript workflow/scripts/phasing_helpers.R \
#               --function_name aln_chunks_to_minimap \
#               --res_path {params.nw_res_path} \
#               --region {wildcards.region} \
#               --sample {wildcards.sample} \
#               --hap {wildcards.hap} \
#               --hg38_mmi {params.hg38_mmi} \
#               --mm2_bin {params.mm2_bin} \
#               --samtools_bin {params.samtools_bin} \
#               --bedtools_bin {params.bedtools_bin} \
#               --chunklen {params.chunklen}
#         """


# General rules that should be fine regardless of context

rule index_bam:
    input: 
        '{foo}.bam'
    output:
        '{foo}.bam.bai'
    params:
        samtools_bin = config['samtools_bin'],
    shell:
        """
        {params.samtools_bin} index {input}
        """
   
rule index_vcf:
    input:
        '{foo}.vcf.gz'
    output:
        '{foo}.vcf.gz.tbi'
    params:
        tabix_bin = config['tabix_bin'],
    shell:
        """
        {params.tabix_bin} -p vcf {input}
        """


#rule compress_vcf:
#     input:
#         '{foo}.vcf'
#     output:
#         '{foo}.vcf.gz',
#     shell:
#         """
#         bgzip -c {input} > {output}
#         """
